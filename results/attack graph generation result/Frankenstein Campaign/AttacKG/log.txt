Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.25.0 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.25.0
Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32
runfile('C:/Users/xiaowan/Documents/GitHub/AttacKG/Attack_Graph/attackGraph.py', wdir='C:/Users/xiaowan/Documents/GitHub/AttacKG')
Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32
2022-04-13 16:50:19.850266: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cudart64_110.dll'; dlerror: cudart64_110.dll not found
2022-04-13 16:50:19.858569: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
INFO:root:======techniqueIdentifier.py: Wed Apr 13 16:50:29 2022======
INFO:root:---Load Model: ./new_cti.model!---
INFO:root:---Add Pipe 'ner'!---
INFO:root:---Created Optimizer!---
DEBUG:h5py._conv:Creating converter from 3 to 5
2022-04-13 16:50:31.625428: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library nvcuda.dll
2022-04-13 16:50:32.034547: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1733] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: NVIDIA GeForce 920MX computeCapability: 5.0
coreClock: 0.993GHz coreCount: 2 deviceMemorySize: 2.00GiB deviceMemoryBandwidth: 14.92GiB/s
2022-04-13 16:50:32.036517: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cudart64_110.dll'; dlerror: cudart64_110.dll not found
2022-04-13 16:50:32.037350: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cublas64_11.dll'; dlerror: cublas64_11.dll not found
2022-04-13 16:50:32.038060: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cublasLt64_11.dll'; dlerror: cublasLt64_11.dll not found
2022-04-13 16:50:32.039186: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cufft64_10.dll'; dlerror: cufft64_10.dll not found
2022-04-13 16:50:32.039952: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'curand64_10.dll'; dlerror: curand64_10.dll not found
2022-04-13 16:50:32.040643: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cusolver64_11.dll'; dlerror: cusolver64_11.dll not found
2022-04-13 16:50:32.041334: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cusparse64_11.dll'; dlerror: cusparse64_11.dll not found
2022-04-13 16:50:32.042011: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cudnn64_8.dll'; dlerror: cudnn64_8.dll not found
2022-04-13 16:50:32.042463: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1766] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
2022-04-13 16:50:32.043705: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX AVX2
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2022-04-13 16:50:32.044981: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1258] Device interconnect StreamExecutor with strength 1 edge matrix:
2022-04-13 16:50:32.045529: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1264]      
INFO:root:---S0-2: Identify IoC with Regex in text!---
DEBUG:root:Find IoC matching: NetLoc - <re.Match object; span=(715, 753), match='hxxp://droobox[.]online:80/luncher.doc'>
DEBUG:root:Find IoC matching: DocFile - <re.Match object; span=(530, 558), match='MinutesofMeeting-2May19.docx'>
DEBUG:root:Find IoC matching: DocFile - <re.Match object; span=(742, 753), match='luncher.doc'>
DEBUG:root:Find IoC matching: DocFile - <re.Match object; span=(764, 775), match='luncher.doc'>
DEBUG:root:Find IoC matching: Vulnerability - <re.Match object; span=(800, 814), match='CVE-2017-11882'>
DEBUG:root:Replaced with: MinutesofMeeting-2May19.docx - document
DEBUG:root:Replaced with: hxxp://droobox[.]online:80/luncher.doc - network
DEBUG:root:Replaced with: luncher.doc - document
DEBUG:root:Replaced with: CVE-2017-11882 - exploit
INFO:root:---S1-1: Parse clean text to NLP doc!---
INFO:root:---Add Regex-based NER Pipe!---
2022-04-13 16:50:39.820560: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:176] None of the MLIR Optimization Passes are enabled (registered 2)
INFO:root:---S1-1: Parsing NLP doc to get Attack Graph!---
INFO:root:---S1-1.0: Parsing NLP doc to get Coreference!---
DEBUG:root:---coref_origiin:---
 actors-actor
DEBUG:root:their-
DEBUG:root:---coref_origiin:---
 document-file
DEBUG:root:document-file
DEBUG:root:it-
DEBUG:root:document-file
DEBUG:root:it-
DEBUG:root:---coref_origiin:---
 stager-executable
DEBUG:root:stager-executable
DEBUG:root:---coref_origiin:---
 script-executable
DEBUG:root:it-
DEBUG:root:---coref_origiin:---
 Talos-actor
DEBUG:root:it-
DEBUG:root:it-
DEBUG:root:it-
DEBUG:root:---coref_origiin:---
 stager-executable
DEBUG:root:stager-executable
DEBUG:root:---coref_origiin:---
 stager-executable
DEBUG:root:stager-executable
DEBUG:root:---coref_origiin:---
 C2-network
DEBUG:root:C2-network
DEBUG:root:it-
DEBUG:root:C2-network
INFO:root:---S1-1.1: Parsing NLP doc to get Attack Graph Nodes!---
INFO:root:---S1-1.2: Parsing NLP doc to get Attack Graph Edges!---
DEBUG:root:actors#executable#9
DEBUG:root:documents#file#15
DEBUG:root:word#file#14
DEBUG:root:email#network#19
DEBUG:root:actors#executable#9
DEBUG:root:Related sentence: In order to compromise their victims, the threat actors sent the trojanized Microsoft Word documents, probably via email.
DEBUG:root:document#file#28
DEBUG:root:exploit#vulnerability#39
DEBUG:root:Related sentence: The first vector relies on a trojanized document that fetches a remote template and then uses a known exploit.
DEBUG:root:vector#network#43
DEBUG:root:document#file#48
DEBUG:root:macros#executable#55
DEBUG:root:script#executable#61
DEBUG:root:basic#network#60
DEBUG:root:Related sentence: The second vector is a trojanized Word document that prompts the victim to enable macros and run a Visual Basic script.
DEBUG:root:c2#network#81
DEBUG:root:actor#executable#80
DEBUG:root:Related sentence: We were able to correlate these two techniques to the same threat campaign due to overlapping threat actor C2.
DEBUG:root:talos#executable#89
DEBUG:root:document#file#92
DEBUG:root:scenario#network#87
DEBUG:root:Recover IoC regex: MinutesofMeeting-2May19.docx
DEBUG:root:document#file#95
DEBUG:root:jordan#executable#106
DEBUG:root:Related sentence: In the first scenario, Talos discovered a document named "document", that appeared to display the national flag of Jordan.
DEBUG:root:document#file#92
DEBUG:root:template#file#119
DEBUG:root:document#file#113
DEBUG:root:document#file#92
DEBUG:root:Recover IoC regex: hxxp://droobox[.]online:80/luncher.doc
DEBUG:root:network#network#127
DEBUG:root:actor#executable#122
DEBUG:root:Related sentence: Once the victim opens the document, it fetches a remove template from the actor-controlled website, network.
DEBUG:root:document#file#92
DEBUG:root:Recover IoC regex: CVE-2017-11882
DEBUG:root:exploit#vulnerability#137
DEBUG:root:Recover IoC regex: luncher.doc
DEBUG:root:document#file#131
DEBUG:root:Recover IoC regex: luncher.doc
DEBUG:root:document#file#92
DEBUG:root:Related sentence: Once the document was downloaded, it used exploit, to execute code on the victim's machine.
DEBUG:root:file#file#153
DEBUG:root:script#executable#158
DEBUG:root:exploit#vulnerability#150
DEBUG:root:command#executable#157
DEBUG:root:task#system#166
DEBUG:root:winupdate#file#169
DEBUG:root:Related sentence: After the exploit, the file would run a command script to set up persistence as a scheduled task named "WinUpdate".
DEBUG:root:task#system#174
DEBUG:root:commands#executable#184
DEBUG:root:powershell#executable#183
DEBUG:root:stager#executable#189
DEBUG:root:Related sentence: That scheduled task would run a series of base64-encoded PowerShell commands that acted as a stager.
DEBUG:root:stager#executable#192
DEBUG:root:stager#executable#189
DEBUG:root:Related sentence: The stager will be described in more detail in the next section.
DEBUG:root:script#executable#222
DEBUG:root:macro#executable#212
DEBUG:root:visual#executable#216
DEBUG:root:vba#executable#220
DEBUG:root:Related sentence: 
        As soon as the user enabled the macro, a robust Visual Basic Application (VBA) script began to execute.
DEBUG:root:script#executable#229
DEBUG:root:vba#executable#228
DEBUG:root:Related sentence: The VBA script contained two anti-analysis features.
DEBUG:root:script#executable#229
DEBUG:root:management#executable#243
DEBUG:root:wmi#file#246
DEBUG:root:Related sentence: First, it would query Windows Management Instrumentation (WMI) to check if any of the following applications were running.
DEBUG:root:actors#executable#269
DEBUG:root:msbuild#executable#271
DEBUG:root:file#file#278
DEBUG:root:actor#executable#275
DEBUG:root:Related sentence: 
        Once the evasion checks were complete, the threat actors used MSbuild to execute an actor-created file named "LOCALAPPDATA\Intel\instal.xml".
DEBUG:root:script#executable#300
DEBUG:root:task#system#315
DEBUG:root:msbuild#file#311
DEBUG:root:Related sentence: Based on lexical analysis, we assess with high confidence that this component of the macro script was based on an open-source project called "MSBuild-inline-task.
DEBUG:root:year#network#325
DEBUG:root:Related sentence: While this technique was previously documented last year, it has rarely been observed being used in operations.
DEBUG:root:talos#executable#337
DEBUG:root:msbuild#executable#342
DEBUG:root:talos#executable#337
DEBUG:root:binary#file#349
DEBUG:root:talos#executable#337
DEBUG:root:code#file#368
DEBUG:root:Related sentence: Talos suspects the adversary chose MSBuild because it is a signed Microsoft binary, meaning that it can bypass application whitelisting controls on the host when being used to execute arbitrary code.
DEBUG:root:talos#executable#337
DEBUG:root:commands#executable#387
DEBUG:root:file#file#376
DEBUG:root:Related sentence: 
        Once the "instal.xml" file began execution, it would deobfuscate the base64-encoded commands.
DEBUG:root:stager#executable#392
DEBUG:root:script#executable#397
DEBUG:root:payload#executable#403
DEBUG:root:Related sentence: This revealed a stager, or a small script designed to obtain an additional payload.
DEBUG:root:stager#executable#408
DEBUG:root:stager#executable#392
DEBUG:root:fruityc2#network#424
DEBUG:root:powershell#executable#425
DEBUG:root:Related sentence: While analyzing this stager, we noticed some similarities to the "Get-Data" function of the FruityC2 PowerShell agent.
DEBUG:root:stager#executable#435
DEBUG:root:functionality#network#437
DEBUG:root:stager#executable#441
DEBUG:root:stager#executable#435
DEBUG:root:command#executable#446
DEBUG:root:c2#network#450
DEBUG:root:Related sentence: One notable difference is that this particular stager included functionality that allowed the stager to communicate with the command and control (C2) via an encrypted RC4 byte stream.
DEBUG:root:msdn[.]cloud#executable#472
DEBUG:root:actors#executable#465
DEBUG:root:c2#network#467
DEBUG:root:Related sentence: In this sample, the threat actors' C2 server was the domain msdn[.]cloud.
DEBUG:root:c2#network#476
DEBUG:root:c2#network#450
DEBUG:root:Related sentence: 
        the C2 would return a string of characters.
DEBUG:root:c2#network#450
DEBUG:root:empire#file#495
DEBUG:root:Related sentence: Once the string was RC4 decrypted, it launched a PowerShell Empire agent.
DEBUG:root:script#executable#500
DEBUG:root:powershell#executable#499
DEBUG:root:Related sentence: The PowerShell script would attempt to enumerate the host to look for certain information.
DEBUG:root:c2#network#529
DEBUG:root:c2#network#450
DEBUG:root:actor#executable#527
DEBUG:root:Related sentence: Once the aforementioned information was obtained, it was sent back to the threat actor's C2.
WARNING:root:---Draw attack graph with dot!---
DEBUG:root:email#network#19
DEBUG:root:vector#network#43
DEBUG:root:document#file#92
DEBUG:root:scenario#network#87
DEBUG:root:document#file#95
DEBUG:root:network#network#127
DEBUG:root:exploit#vulnerability#137
DEBUG:root:exploit#vulnerability#150
DEBUG:root:wmi#file#246
DEBUG:root:task#system#315
DEBUG:root:msbuild#file#311
DEBUG:root:year#network#325
DEBUG:root:code#file#368
DEBUG:root:stager#executable#408
DEBUG:root:functionality#network#437
DEBUG:root:empire#file#495
DEBUG:graphviz.files:write 2627 bytes to 'G.gv'
DEBUG:graphviz.backend:run ['dot', '-Kdot', '-Tpdf', '-O', 'G.gv']
DEBUG:graphviz.backend:view: 'G.gv.pdf'